{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ex",
				"exitCallback"
			],
			[
				"rebui",
				"rebuildPostThumbs"
			],
			[
				"walk",
				"walkCategoryComponents"
			],
			[
				"attrib",
				"attributeValues"
			],
			[
				"attri",
				"attributeValues"
			],
			[
				"cate",
				"categoryID"
			],
			[
				"wa",
				"walkAllComponents"
			],
			[
				"vari",
				"variety"
			],
			[
				"var",
				"variety"
			],
			[
				"inline",
				"inlineScriptTags"
			],
			[
				"rese",
				"resetTimeout"
			],
			[
				"deleteFol",
				"deleteFolderRecursive"
			],
			[
				"Template",
				"templateHTML"
			],
			[
				"varie",
				"varietyExtension"
			],
			[
				"back",
				"backStack"
			],
			[
				"can",
				"cancelAnimation"
			],
			[
				"findO",
				"findOneAndUpdate"
			],
			[
				"find",
				"findOneAndUpdate"
			],
			[
				"getC",
				"getCurrentCategory"
			],
			[
				"getCateg",
				"getCategoryById"
			],
			[
				"categ",
				"categoryObj"
			],
			[
				"sideb",
				"sidebarAlign"
			],
			[
				"sideB",
				"sidebarAlign"
			],
			[
				"side",
				"sidebarAlign"
			],
			[
				"catego",
				"categoryOptions"
			],
			[
				"Initi",
				"initializeStream"
			],
			[
				"tag",
				"tagMatching"
			],
			[
				"dataM",
				"dataMatching"
			],
			[
				"tagM",
				"tagMatch"
			],
			[
				"toggle",
				"toggleShowAll"
			],
			[
				"curr",
				"currentTag"
			],
			[
				"optio",
				"optionObj"
			],
			[
				"confir",
				"confirmObj"
			],
			[
				"pr",
				"primary-darkest"
			],
			[
				"formatee",
				"formattedDate3"
			],
			[
				"forma",
				"formattedDate2"
			],
			[
				"format",
				"formattedDate2"
			],
			[
				"for",
				"formattedDate"
			],
			[
				"thumb",
				"thumbnail"
			],
			[
				"thumn",
				"thumbnail"
			],
			[
				"getU",
				"getUserPref"
			],
			[
				"initi",
				"initialized"
			],
			[
				"light",
				"lightOrDark"
			],
			[
				"documenT",
				"documentElement"
			],
			[
				"getH",
				"getHintAtIndex"
			],
			[
				"up",
				"updateTagFromIndex"
			],
			[
				"vare",
				"varietyExtension"
			],
			[
				"primra",
				"primary-mid"
			],
			[
				"oip",
				"optionsObj"
			],
			[
				"Close",
				"closeModal"
			],
			[
				"progres",
				"progressBar"
			],
			[
				"remo",
				"removeViewer"
			],
			[
				"clear",
				"clearViewer"
			],
			[
				"getCA",
				"getCategoryById"
			],
			[
				"getUser",
				"getUserPref"
			],
			[
				"border-radius",
				"border-top-left-radius\tproperty"
			],
			[
				"second",
				"secondary-mid"
			],
			[
				"quit",
				"quitTimeout"
			],
			[
				"inter",
				"interupt"
			],
			[
				"containreP",
				"containerPadding"
			],
			[
				"place",
				"placeholder"
			],
			[
				"placeh",
				"placeholderWidth"
			],
			[
				"placeho",
				"placeholderHeight"
			],
			[
				"las",
				"lastModified"
			],
			[
				"backup",
				"backupPath"
			],
			[
				"upload",
				"uploadTempDest"
			],
			[
				"addM",
				"addMoreWithInput"
			],
			[
				"deletFolder",
				"deleteFolderRecursive"
			],
			[
				"getT",
				"getUploadTempURL"
			],
			[
				"Err",
				"errorMessage"
			],
			[
				"unitL",
				"unityLoaded"
			],
			[
				"unityP",
				"unityPlaying"
			],
			[
				"progr",
				"progressBar"
			],
			[
				"conte",
				"contentPreview"
			],
			[
				"EXIT",
				"exitEdit"
			],
			[
				"anno",
				"annotationCharLimit"
			],
			[
				"annotat",
				"annotationCharLimit"
			],
			[
				"compl",
				"completeCallback"
			],
			[
				"submit",
				"submitTimeout"
			],
			[
				"sub",
				"submitTimeout"
			],
			[
				"in",
				"interrupt"
			],
			[
				"upl",
				"uploadPreview"
			],
			[
				"backgrou",
				"background-color\tproperty"
			],
			[
				"confirm",
				"confirmCallback"
			],
			[
				"com",
				"completeCallback"
			],
			[
				"pro",
				"progressCallback"
			],
			[
				"succ",
				"successCallback"
			],
			[
				"add",
				"addedCallback"
			],
			[
				"previews",
				"previewsContainer"
			],
			[
				"showA",
				"showAddComponent"
			],
			[
				"compo",
				"componentAdder"
			],
			[
				"compone",
				"componentAdder"
			],
			[
				"K",
				"keyCode"
			],
			[
				"getM",
				"getMustacheTempalates"
			],
			[
				"edit",
				"editCallback"
			],
			[
				"edi",
				"editCallback"
			],
			[
				"click",
				"clickCallback"
			],
			[
				"holdTh",
				"holdThresholdTimeout"
			],
			[
				"contin",
				"containerTop"
			],
			[
				"con",
				"containerTop"
			],
			[
				"sc",
				"scrollStart"
			],
			[
				"annot",
				"annotationObj"
			],
			[
				"ano",
				"annotationObj"
			],
			[
				"op",
				"optionDirty"
			],
			[
				"cap",
				"captionMdes"
			],
			[
				"prev",
				"prevRotation"
			],
			[
				"dirty",
				"dirtyComponents"
			],
			[
				"compon",
				"componentDirty"
			],
			[
				"componetn",
				"componentDirty"
			],
			[
				"Dir",
				"componentDirty"
			],
			[
				"ac",
				"actuallyUpdate"
			],
			[
				"aa",
				"actuallyUpdate"
			],
			[
				"rot",
				"rotateImage"
			],
			[
				"init",
				"initComponentInput"
			],
			[
				"previ",
				"previewText"
			],
			[
				"ann",
				"annotation"
			],
			[
				"ease-",
				"ease-in-out"
			],
			[
				"high",
				"highlightInitialized"
			],
			[
				"time",
				"timestamp"
			],
			[
				"tiem",
				"timestamp"
			],
			[
				"error",
				"errorMessage"
			],
			[
				"mouse",
				"mousedown"
			],
			[
				"out",
				"outerHeight"
			],
			[
				"ori",
				"originalWidth"
			],
			[
				"origi",
				"originalHeight"
			],
			[
				"orig",
				"originalHeight"
			],
			[
				"origin",
				"originalWidth"
			],
			[
				"orin",
				"originalHeight"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "var projection = mat4.create()  // projection matrix\nvar modelview = mat4.create()   // modelview matrix; value comes from rotator\nvar normalMatrix = mat3.create()    // matrix, derived from modelview matrix, for transforming normal vectors\n\nvar scale = 1\nvar dt = 1000/60\nvar time = 0\n\nvar fieldSize = 100000\nvar seeds \nvar freqMin = 0.1 \nvar freqMax = 4\nvar sizeMin = 0.1\nvar sizeMax = 2\nvar frequencies = []\n\nvar sampleColors = [\n    0.349, 0.453, 0.651,\n    0.761, 0.592, 0.353,\n    0.235, 0.159, 0.159,\n    0.110, 0.110, 0.141,\n    0.816, 0.816, 0.899,\n    0.827, 0.69, 0.384, \n    0.592, 0.701, 0.773]\n\nvar texture\nvar framebuffer\n\nvar field = null\nvar cube = null\n\n//'5976a6', 'c2975a', '3c2d2a', '1c1c24', 'd0cee5', 'd3b062', '97b3c5']\n/* Initialize the WebGL context.  Called from init() */\nfunction init() {\n    glInit(() => {\n\n        rotator = new TrackballRotator(canvas, draw, 15)\n        zoomer = new Zoomer(canvas) \n\n        reset()\n    })\n\n    document.body.onkeyup = function(e){\n        if(e.keyCode == 32){\n            reset()\n        }\n    }   \n}\n\nfunction loop() {\n    draw()\n\n    // setTimeout(loop, dt)\n\n    time += dt\n}\n\nfunction reset() {\n    frequencies = [\n        lerp(freqMin, freqMax, Math.random()),\n        lerp(freqMin, freqMax, Math.random()),\n        lerp(freqMin, freqMax, Math.random()),\n        4]\n\n    seeds = [Math.random(), Math.random(), Math.random(), Math.random()]\n\n    gl.viewport(0,0, canvas.width, canvas.height)\n    /* Create Objects */\n    field = initObject({\n        shader:\"unlitPoint\",\n        elements:fieldSize,\n        drawMode: gl.POINTS\n    })\n    generateField()\n\n    var color = defaultColors[0]\n    color.push(1)\n    var mat = initMaterial(\"phongTexture\", {\n        \"specularColor\": [1, 0, 0],\n        \"diffuseColor\": color,\n        \"specularExponent\": 1,\n        \"lightPosition\": defaultLights[1]\n    })\n\n    cube = initObject({\n        mat:mat,\n        modelName:\"cube\"\n    })\n\n    /* Start draw field */\n    texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 512, 512, \n    \t0, gl.RGBA, gl.UNSIGNED_BYTE, null)\n\n    gl.viewport(0,0,512, 512)\n\n    framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)\n\n    drawField()\n\n    gl.generateMipmap(gl.TEXTURE_2D);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\n    // Draw mains stuff\n    gl.viewport(0,0,canvas.width, canvas.height)\n    draw()\n\n    /* End draw field */\n\n    /* Start test texture *\n    var texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0,0,255,255]))\n\n    var image = new Image();\n    image.src = './space.jpg'\n    image.crossOrigin = \"anonymous\"; \n    image.addEventListener('load', function() {\n        console.log(\"LOADED!\")\n        console.log(image)\n        // Now that the image has loaded make copy it to the texture.\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image);\n        gl.generateMipmap(gl.TEXTURE_2D);\n\n        // Draw cube now\n        initBasicTexture()\n        // installModelWithTexture(objects[0])\n        // currentModelNumber = 0\n\n        draw()\n    });\n    /* End Test Texture */\n\n    //draw()\n}\n\nfunction draw() { \n    gl.clearColor(clearVal, clearVal, clearVal, 1);  // specify the color to be used for clearing\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Draw flat field as background\n    mat4.ortho(projection, -1.0, 1.0, -1.0, 1.0, 0.1, 100); \n    // modelview = rotator.getViewMatrix()//mat4.create()\n    modelview = mat4.create()\n \n    gl.disable(gl.DEPTH_TEST)\n\n    if(field) {\n        field.dirtyAttributes()\n        field.draw(modelview, projection, null)\n    }\n\n    gl.enable(gl.DEPTH_TEST) \n\n    // Draw perspective object\n    mat4.perspective(projection, Math.PI/5, 1, 10, 20);\n    modelview = rotator.getViewMatrix();\n\n    mat4.scale(modelview, modelview, vec3.fromValues(scale, scale, scale))\n    if(zoomer) {\n\t    var zoom = zoomer.getZoomScale()\n\t    mat4.scale(modelview, modelview, vec3.fromValues(zoom,zoom,zoom))\n\t}\n    mat3.normalFromMat4(normalMatrix, modelview);\n\n    if(cube)\n        cube.draw(modelview, projection, normalMatrix)\n}\n\nfunction drawField() {\n    gl.clearColor(clearVal, clearVal, clearVal, 1);  // specify the color to be used for clearing\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); \n\n    // Draw flat field as background\n    mat4.ortho(projection, -1.0, 1.0, -1.0, 1.0, 0.1, 100); \n    modelview = mat4.create()\n \n    if(field) {\n        field.dirtyAttributes()\n        field.draw(modelview, projection, null)\n    }\n}\n\nfunction getNoise(x, y, i) {\n    noise.seed(seeds[i])\n    return 0.5 + noise.simplex2(x*frequencies[i], y*frequencies[i])/2;\n}\n\nfunction generateField() {\n    var width = 1;\n    var height = 1;\n    points = []\n    for(let i = 0; i < fieldSize; i++) {\n        // Add random point to canvas\n        var randX =  Math.random()\n        var randY =  Math.random()\n        var randZ = -4\n\n        var vec = vec3.fromValues(randX, randY, randZ)\n        points.push(vec)\n    }\n\n\n    // Update coords from points\n    var s = 0\n    var c = 0\n    var c2 = 0\n    var c3 = 0\n\n    var r = 0 \n    var g = 0\n    var b = 0\n\n    var r2 = 0\n    var g2 = 0\n    var b2 = 0\n\n    var p = 10\n    var p2 = 1 \n    var p3 = 3\n    var p4 = 1\n    var p5 = 5\n\n    var f = 0.1\n    var f2 = 1.5\n    var f3 = 0\n\n    var freq = 10\n    var min = 1\n    var max = 0\n    for(let i = 0; i < fieldSize; i++) {\n        s = lerp(sizeMin, sizeMax, Math.random())\n        // c = Math.pow(lerp(Math.random(), getNoise(points[i][0], points[i][1], 3), Math.random()), p)\n        c = Math.pow(Math.random(), p)*f\n        c2 = Math.pow(getNoise(points[i][0], points[i][1], 3), p2)*f\n        /*if(c2 < min)\n            min = c2\n        if(c2 > max)\n            max = c2*/\n        r = g = b = lerp(c, c2, Math.pow(Math.random(), p3))\n\n\n        //r2 = Math.pow(getNoise(points[i][0], points[i][1], 0), p3)\n        //g2 = Math.pow(getNoise(points[i][0], points[i][1], 1), p3)\n        //b2 = Math.pow(getNoise(points[i][0], points[i][1], 2), p3)\n\n\n\n        if(Math.pow(Math.random(), p5) > 0.8)\n        {\n            var variety = 0\n            var test = Math.random()\n            if(test > 0.8)\n                variety = 2\n            else if(test > 0.6)\n                variety = 1\n\n            var noise = Math.pow(getNoise(points[i][0], points[i][1], variety), p4);\n            switch(variety) {\n                case 0:\n                    r2 = 0.349*noise\n                    g2 = 0.453*noise\n                    b2 = 0.651*noise\n                break;\n                case 1:\n                    r2 = 0.761*noise\n                    g2 = 0.592*noise\n                    b2 = 0.353*noise\n                break;\n                case 2:\n                    r2 = 0.592*noise\n                    g2 = 0.701*noise\n                    b2 = 0.773*noise \n                break\n            }\n\n            f3 = 1\n        }\n        else \n            f3 = 0\n\n        //0.349, 0.453, 0.651       \n        //0.761, 0.592, 0.353\n        //0.592, 0.701, 0.773\n\n        // Random\n        if(Math.pow(Math.random(), 6) > 0.98) {\n            var index = Math.floor(Math.random()*(sampleColors.length/3))\n            r = Math.max(sampleColors[index*3+0], 0)*f2\n            g = Math.max(sampleColors[index*3+1], 0)*f2\n            b = Math.max(sampleColors[index*3+2], 0)*f2\n            s += 0.3\n            /*r = sma\n            g = Math.random()\n            b = Math.random()*/\n        }\n\n        field.setValue(\"coords\", i*3 + 0, -1 + 2*points[i][0])\n        field.setValue(\"coords\", i*3 + 1, -1 + 2*points[i][1])\n        field.setValue(\"coords\", i*3 + 2, 2*points[i][2])\n\n        field.setValue(\"color\", i*3 + 0, Math.min(clearVal + lerp(r, r2, f3)*(1-clearVal), 1))\n        field.setValue(\"color\", i*3 + 1, Math.min(clearVal + lerp(g, g2, f3)*(1-clearVal), 1))\n        field.setValue(\"color\", i*3 + 2, Math.min(clearVal + lerp(b, b2, f3)*(1-clearVal), 1))\n\n        field.setValue(\"size\", i, s)\n        // field.setValue(\"color\", i*3 + 0, 1)\n        // field.setValue(\"color\", i*3 + 1, 1)\n        // field.setValue(\"color\", i*3 + 2, 1)\n        // field.setValue(\"size\", i, 1)\n    }\n\n    field.dirtyAttributes()\n\n    //console.log(\"Min: \" + min + \" Max: \" + max)\n}",
			"file": "9 - StarCube2/index.js",
			"file_size": 8859,
			"file_write_time": 132096147201109823,
			"settings":
			{
				"buffer_size": 8539,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var projection = mat4.create()  // projection matrix\nvar modelview = mat4.create()   // modelview matrix; value comes from rotator\nvar normalMatrix = mat3.create()    // matrix, derived from modelview matrix, for transforming normal vectors\n\nvar scale = 1\nvar dt = 1000/60\nvar time = 0\n\nvar fieldSize = 100000\nvar seeds \nvar freqMin = 0.1 \nvar freqMax = 4\nvar sizeMin = 0.1\nvar sizeMax = 2\nvar frequencies = []\n\nvar sampleColors = [\n    0.349, 0.453, 0.651,\n    0.761, 0.592, 0.353,\n    0.235, 0.159, 0.159,\n    0.110, 0.110, 0.141,\n    0.816, 0.816, 0.899,\n    0.827, 0.69, 0.384, \n    0.592, 0.701, 0.773]\n\nvar texture\nvar framebuffer\n\nvar field = null\nvar cube = null\n\n//'5976a6', 'c2975a', '3c2d2a', '1c1c24', 'd0cee5', 'd3b062', '97b3c5']\n/* Initialize the WebGL context.  Called from init() */\nfunction init() {\n    glInit(() => {\n\n        rotator = new TrackballRotator(canvas, draw, 15)\n        zoomer = new Zoomer(canvas) \n\n        reset()\n    })\n\n    document.body.onkeyup = function(e){\n        if(e.keyCode == 32){\n            reset()\n        }\n    }   \n}\n\nfunction loop() {\n    draw()\n\n    // setTimeout(loop, dt)\n\n    time += dt\n}\n\nfunction reset() {\n    frequencies = [\n        lerp(freqMin, freqMax, Math.random()),\n        lerp(freqMin, freqMax, Math.random()),\n        lerp(freqMin, freqMax, Math.random()),\n        4]\n\n    seeds = [Math.random(), Math.random(), Math.random(), Math.random()]\n\n    gl.viewport(0,0, canvas.width, canvas.height)\n    /* Create Objects */\n    field = initObject({\n        shader:\"unlitPoint\",\n        elements:fieldSize,\n        drawMode: gl.POINTS\n    })\n    generateField()\n\n    var color = defaultColors[0]\n    color.push(1)\n    var mat = initMaterial(\"phongTexture\", {\n        \"specularColor\": [0, 0, 0],\n        \"diffuseColor\": color,\n        \"specularExponent\": 1,\n        \"lightPosition\": defaultLights[1]\n    })\n\n    cube = initObject({\n        mat:mat,\n        modelName:\"uvSphere\"\n    })\n\n    /* Start draw field */\n    texture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n    var size = 2048\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size, size, \n    \t0, gl.RGBA, gl.UNSIGNED_BYTE, null)\n\n    gl.viewport(0,0,size, size)\n\n    framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)\n\n    drawField()\n\n    gl.generateMipmap(gl.TEXTURE_2D);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\n    // Draw mains stuff\n    gl.viewport(0,0,canvas.width, canvas.height)\n    draw()\n\n    /* End draw field */\n}\n\nfunction draw() { \n    gl.clearColor(clearVal, clearVal, clearVal, 1);  // specify the color to be used for clearing\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Draw flat field as background\n    mat4.ortho(projection, -1.0, 1.0, -1.0, 1.0, 0.1, 100); \n    // modelview = rotator.getViewMatrix()//mat4.create()\n    modelview = mat4.create()\n \n    gl.disable(gl.DEPTH_TEST)\n\n    if(field) {\n        field.dirtyAttributes()\n        field.draw(modelview, projection, null)\n    }\n\n    gl.enable(gl.DEPTH_TEST) \n\n    // Draw perspective object\n    mat4.perspective(projection, Math.PI/5, 1, 10, 20);\n    modelview = rotator.getViewMatrix();\n\n    mat4.scale(modelview, modelview, vec3.fromValues(scale, scale, scale))\n    if(zoomer) {\n\t    var zoom = zoomer.getZoomScale()\n\t    mat4.scale(modelview, modelview, vec3.fromValues(zoom,zoom,zoom))\n\t}\n    mat3.normalFromMat4(normalMatrix, modelview);\n\n    if(cube)\n        cube.draw(modelview, projection, normalMatrix)\n}\n\nfunction drawField() {\n    gl.clearColor(clearVal, clearVal, clearVal, 1);  // specify the color to be used for clearing\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); \n\n    // Draw flat field as background\n    mat4.ortho(projection, -1.0, 1.0, -1.0, 1.0, 0.1, 100); \n    modelview = mat4.create()\n \n    if(field) {\n        field.dirtyAttributes()\n        field.draw(modelview, projection, null)\n    }\n}\n\nfunction getNoise(x, y, i) {\n    noise.seed(seeds[i])\n    return 0.5 + noise.simplex2(x*frequencies[i], y*frequencies[i])/2;\n}\n\nfunction generateField() {\n    var width = 1;\n    var height = 1;\n    points = []\n    for(let i = 0; i < fieldSize; i++) {\n        // Add random point to canvas\n        var randX =  Math.random()\n        var randY =  Math.random()\n        var randZ = -4\n\n        var vec = vec3.fromValues(randX, randY, randZ)\n        points.push(vec)\n    }\n\n\n    // Update coords from points\n    var s = 0\n    var c = 0\n    var c2 = 0\n    var c3 = 0\n\n    var r = 0 \n    var g = 0\n    var b = 0\n\n    var r2 = 0\n    var g2 = 0\n    var b2 = 0\n\n    var p = 10\n    var p2 = 1 \n    var p3 = 3\n    var p4 = 1\n    var p5 = 5\n\n    var f = 0.1\n    var f2 = 1.5\n    var f3 = 0\n\n    var freq = 10\n    var min = 1\n    var max = 0\n    for(let i = 0; i < fieldSize; i++) {\n        s = lerp(sizeMin, sizeMax, Math.random())\n        // c = Math.pow(lerp(Math.random(), getNoise(points[i][0], points[i][1], 3), Math.random()), p)\n        c = Math.pow(Math.random(), p)*f\n        c2 = Math.pow(getNoise(points[i][0], points[i][1], 3), p2)*f\n        /*if(c2 < min)\n            min = c2\n        if(c2 > max)\n            max = c2*/\n        r = g = b = lerp(c, c2, Math.pow(Math.random(), p3))\n\n\n        //r2 = Math.pow(getNoise(points[i][0], points[i][1], 0), p3)\n        //g2 = Math.pow(getNoise(points[i][0], points[i][1], 1), p3)\n        //b2 = Math.pow(getNoise(points[i][0], points[i][1], 2), p3)\n\n\n\n        if(Math.pow(Math.random(), p5) > 0.8)\n        {\n            var variety = 0\n            var test = Math.random()\n            if(test > 0.8)\n                variety = 2\n            else if(test > 0.6)\n                variety = 1\n\n            var noise = Math.pow(getNoise(points[i][0], points[i][1], variety), p4);\n            switch(variety) {\n                case 0:\n                    r2 = 0.349*noise\n                    g2 = 0.453*noise\n                    b2 = 0.651*noise\n                break;\n                case 1:\n                    r2 = 0.761*noise\n                    g2 = 0.592*noise\n                    b2 = 0.353*noise\n                break;\n                case 2:\n                    r2 = 0.592*noise\n                    g2 = 0.701*noise\n                    b2 = 0.773*noise \n                break\n            }\n\n            f3 = 1\n        }\n        else \n            f3 = 0\n\n        //0.349, 0.453, 0.651       \n        //0.761, 0.592, 0.353\n        //0.592, 0.701, 0.773\n\n        // Random\n        if(Math.pow(Math.random(), 6) > 0.98) {\n            var index = Math.floor(Math.random()*(sampleColors.length/3))\n            r = Math.max(sampleColors[index*3+0], 0)*f2\n            g = Math.max(sampleColors[index*3+1], 0)*f2\n            b = Math.max(sampleColors[index*3+2], 0)*f2\n            s += 0.3\n            /*r = sma\n            g = Math.random()\n            b = Math.random()*/\n        }\n\n        field.setValue(\"coords\", i*3 + 0, -1 + 2*points[i][0])\n        field.setValue(\"coords\", i*3 + 1, -1 + 2*points[i][1])\n        field.setValue(\"coords\", i*3 + 2, 2*points[i][2])\n\n        field.setValue(\"color\", i*3 + 0, Math.min(clearVal + lerp(r, r2, f3)*(1-clearVal), 1))\n        field.setValue(\"color\", i*3 + 1, Math.min(clearVal + lerp(g, g2, f3)*(1-clearVal), 1))\n        field.setValue(\"color\", i*3 + 2, Math.min(clearVal + lerp(b, b2, f3)*(1-clearVal), 1))\n\n        field.setValue(\"size\", i, s)\n        // field.setValue(\"color\", i*3 + 0, 1)\n        // field.setValue(\"color\", i*3 + 1, 1)\n        // field.setValue(\"color\", i*3 + 2, 1)\n        // field.setValue(\"size\", i, 1)\n    }\n\n    field.dirtyAttributes()\n\n    //console.log(\"Min: \" + min + \" Max: \" + max)\n}",
			"file": "10 - StarOrb1/index.js",
			"file_size": 7994,
			"file_write_time": 132096147588169430,
			"settings":
			{
				"buffer_size": 7700,
				"line_ending": "Windows"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 415,
				"line_ending": "Unix"
			}
		},
		{
			"file": "6 - BacteriaColorful/index.html",
			"settings":
			{
				"buffer_size": 1312,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "6 - BacteriaColorful/index.js",
			"settings":
			{
				"buffer_size": 6985,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "base/gl-base.js",
			"settings":
			{
				"buffer_size": 16755,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				":W",
				":w - Save"
			],
			[
				"js",
				"Set Syntax: JavaScript"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				":",
				":$ - EOF"
			],
			[
				":e",
				":e - Revert"
			],
			[
				":ew",
				":w - Save"
			],
			[
				":Lw",
				"Convert Case: Lower Case"
			],
			[
				":we",
				":w - Save"
			],
			[
				":a",
				":w - Save"
			],
			[
				":package ina",
				"Package Control: Install Package"
			],
			[
				":package install",
				"Package Control: Install Package"
			],
			[
				":inst",
				"Package Control: Install Package"
			],
			[
				":ww",
				"HTML: Wrap Selection With Tag"
			],
			[
				":lw",
				"Snippet: Do While Loop"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 347.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/James/Dropbox/Projects/webglfun",
		"/C/Users/James/Dropbox/Projects/webglfun/base",
		"/C/Users/James/Dropbox/Projects/webglfun/base/shaders",
		"/C/Users/James/Dropbox/Projects/webglfun/Source"
	],
	"file_history":
	[
		"/C/Users/James/Dropbox/Projects/webglfun/10 - StarOrb1/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/9 - StarOrb/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Play/9 - StarOrb.html",
		"/C/Users/James/Dropbox/Projects/webglfun/7 - Starfield1/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/8 - StarCube1/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/7 - Starfield1/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/8 - StarCube1/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/2 - TriOrbit/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/3 - Bacteria1/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/3 - Bacteria1/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/4 - Bacteria2/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/4 - Bacteria2/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/5 - Bacteria3/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/6 - BacteriaColorful/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/6 - BacteriaColorful/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/5 - Bacteria3/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/2 - TriOrbit/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/1 - CrazyTrippyRingThing/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/base/zoomer.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Source/1 - CrazyTrippyRingThing/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/Source/11 - StarOrb2/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/base/trackball-rotator.js",
		"/C/Users/James/Dropbox/Projects/webglfun/README.md",
		"/C/Users/James/Dropbox/Projects/webglfun/compile.sh",
		"/C/Users/James/Dropbox/Projects/webglfun/Play/10 - StarOrb1.html",
		"/C/Users/James/Dropbox/Projects/webglfun/base/basic-object-models-IFS.js",
		"/C/Users/James/Dropbox/Projects/webglfun/12 - BallPit1/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/12 - BallPit/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/12 - BallPit/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/11 - StarOrb2/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/11 - StarOrb2/index.js",
		"/C/Users/James/Dropbox/mystuff/src/server/routes/util.js",
		"/C/Users/James/Dropbox/mystuff/src/server/routes/user.js",
		"/C/Users/James/Dropbox/mystuff/src/css/style.css",
		"/C/Users/James/Dropbox/mystuff/src/css/util/gallery.css",
		"/C/Users/James/Dropbox/mystuff/src/js/templates/component_image.js",
		"/C/Users/James/Dropbox/mystuff/src/js/component.js",
		"/C/Users/James/Dropbox/mystuff/src/js/util/gallery.js",
		"/C/Users/James/Dropbox/mystuff/src/server/routes/post.js",
		"/C/Users/James/Dropbox/mystuff/src/js/viewer.js",
		"/C/Users/James/Dropbox/mystuff/src/js/session.js",
		"/C/Users/James/Dropbox/mystuff/src/js/space.js",
		"/C/Users/James/Dropbox/mystuff/src/js/editor.js",
		"/D/gl/11 - StarOrb2/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/StarOrb/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/base/gl-base.js",
		"/C/Users/James/Dropbox/Projects/webglfun/base/shaders/phongTexture.c",
		"/C/Users/James/Dropbox/Projects/webglfun/StarOrb/index.html",
		"/C/Users/James/Desktop/WebGL Dynamic Reflection Map.htm",
		"/C/Users/James/Dropbox/Projects/webglfun/Examples/basic-specular-lighting-Phong.html",
		"/C/Users/James/Dropbox/Projects/webglfun/Source/StarCube1/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/Source/StarCube1/index.js",
		"/C/Users/James/Dropbox/mystuff/src/js/util/fnc.js",
		"/C/Users/James/Dropbox/mystuff/src/js/templates/viewer.mustache.html",
		"/C/Users/James/Dropbox/MyStuff/credentials.txt",
		"/C/Users/James/Dropbox/MyStuff/src/js/util/UnityLoader.js",
		"/C/Users/James/Dropbox/mystuff/src/js/templates/component_unity.js",
		"/C/Users/James/Dropbox/mystuff/src/js/templates/component_video.js",
		"/C/Users/James/Dropbox/mystuff/src/js/templates/component_image.mustache.html",
		"/C/Users/James/Dropbox/mystuff/src/js/post.js",
		"/C/Users/James/Dropbox/mystuff/src/js/util/adapter.js",
		"/S/MyStuff/uploads/5d0b8a58a32f280f204be846/5d1bd5c4955e1313f8ba70f7/5d3781067be93d25409a0903/5d40fdb8a5b53d39a4395a30/bubblegum/Build.json",
		"/C/Users/James/Dropbox/mystuff/src/html/index.html",
		"/C/Users/James/Dropbox/Projects/Planet Plunder 2.0/Build/Build/UnityLoader.js",
		"/C/Users/James/Dropbox/Projects/Planet Plunder 2.0/Build/Web/Build/UnityLoader.js",
		"/C/Program Files/fnord software/WebM for Premiere/presets/Presets.txt",
		"/F/Applications/Installers/Adobe/webmreadme.txt",
		"/C/Users/James/Dropbox/Projects/webglfun/Starfield/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Starfield/index.html",
		"/F/MyFiles_Archive/Game Design/Unity/Planet Plunder/Project/PlanetPlunder0.9/Assets/Scripts/Control.cs",
		"/C/Users/James/Dropbox/MyStuff/src/server/config/mystuff.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Source/CrazyTrippyRingThing/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Source/BacteriaColorful/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Template/index.js",
		"/C/Users/James/Dropbox/MyStuff/src/server/routes/post.js",
		"/C/Users/James/Dropbox/Projects/webglfun/Template/index.html",
		"/F/Documents/SavedGames/Chopper/Levels/Player1/Level_0_7",
		"/F/Documents/SavedGames/Chopper/Levels/Player1/Level_0_3",
		"/C/Users/James/Dropbox/Projects/webglfun/TriOrbit/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/CrazyTrippyRingThing/index.js",
		"/C/Users/James/Dropbox/Projects/webglfun/TriOrbit/index.html",
		"/C/Users/James/Dropbox/Projects/webglfun/CrazyTrippyRingThing/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/BacteriaColorful/index.js",
		"/C/Users/James/Dropbox/Projects/Graphics/BacteriaColorful2/index.js",
		"/C/Users/James/.ssh/id_rsa.pub",
		"/C/Users/James/.inputrc",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria3/index.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria3/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria2/index.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria1/index.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Template/index.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria1/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria2/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/BacteriaColorful/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/compile.sh",
		"/C/Users/James/Dropbox/Projects/Graphics/node_modules/inline-scripts/src/inlineScriptTags.js",
		"/C/Users/James/Dropbox/Projects/Graphics/crazytrippyringthing/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria1/test.html",
		"/C/Users/James/Dropbox/Projects/Graphics/base/inlineScriptTags.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/bacteria.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Bacteria1/tri.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/node_modules/inline-scripts/src/cli/wrapper.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/index.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/node_modules/inline-scripts/src/cli/inlineScriptTags.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/node_modules/inline-scripts/src/inlineScriptTags.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/compile.sh",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/tri.js",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/test.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/experiment.html",
		"/C/Users/James/Dropbox/Projects/Graphics/Experiment/node_modules/inline-scripts/readme.md",
		"/C/Users/James/Desktop/gltest/gl-base.js",
		"/C/Users/James/Desktop/gl/gl/test.html",
		"/C/Users/James/Desktop/gltest/tri.js",
		"/C/Users/James/Desktop/gl/gl/test.js",
		"/C/Users/James/Desktop/gl/gl/tri.js",
		"/C/Users/James/Desktop/gl/gl/gl-base.js",
		"/F/MyFiles_B/Career/Website/source/index.html",
		"/F/MyFiles_B/Career/Website/source/templates/_templates.tmpl.htm",
		"/F/MyFiles_B/Career/Website/source/pages/contactv2.htm",
		"/F/MyFiles_B/Career/Website/source/pages/projectsv2.htm",
		"/F/MyFiles_B/Education/College/Term 1/Audio/VGD106b_Hooks,James_w11/VGD106b_Hooks,James_aq1/VGD_JDH_CODE_FNL/FNL_CONTROLS.txt",
		"/F/MyFiles_B/Education/College/Term 3/Animation/Week 2/Animation assignment.txt",
		"/C/Users/James/Dropbox/mystuff/src/server/config/mystuff.js",
		"/F/MyFiles_B/Education/College/Term 4/Term Lab 4 - Mad Monkey/Level Editor/Instructions.txt",
		"/F/MyFiles_B/Education/UofT/Fall 2017/CSC385/lab6/lab6.s",
		"/F/System/Config/Keys.txt",
		"/F/System/Config/path.txt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 105.0,
		"where_history":
		[
			"C:\\Users\\James\\Dropbox\\mystuff\\src\\, *.js, *.css, *.html",
			"C:\\Users\\James\\Dropbox\\mystuff\\, *.js, *.css, *.html",
			"C:\\Users\\James\\Dropbox\\mystuff\\src, *.js, *.css, *.html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff\\src, *.js, *.css, *.html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff\\src, *.html",
			"C:\\Users\\James\\Dropbox\\mystuff\\src, *.js, *.css, *.html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff\\src, *.js, *.css, *.html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff\\src, *.js, *.css",
			"C:\\Users\\James\\Dropbox\\mystuff\\src, *.js, *.css",
			"C:\\Users\\James\\Dropbox\\mystuff, *.js, *.css",
			"C:\\Users\\James\\Dropbox\\mystuff, *.css",
			"C:\\Users\\James\\Dropbox\\mystuff, *.js, *.css, *html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff\\src, *.js, *.css, *html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff, *.js, *.css, *html",
			"C:\\Users\\James\\Dropbox\\mystuff\\src, *.js, *.css, *html",
			"C:\\Users\\James\\Dropbox\\mystuff\\src, *.css, *html",
			"C:\\Users\\James\\Dropbox\\mystuff\\src, *.js, *.css, *html",
			"C:\\Users\\James\\Dropbox\\mystuff, *.js, *.css, *html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff\\src, *.js, *.css, *html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff, *.css, *html",
			"C:\\Users\\jhooks.ORADEV\\Desktop\\mystuff, *.js, *.css, *html",
			"C:\\Users\\James\\Dropbox\\MyStuff\\src, *.js, *.css, *html",
			"C:\\Users\\James\\Dropbox\\MyStuff\\src, *.js, *.css",
			"C:\\Users\\James\\Dropbox\\MyStuff\\src, *.js",
			"C:\\Users\\James\\Dropbox\\MyStuff\\src, *.css",
			"C:\\Users\\James\\Dropbox\\MyStuff\\src, *.js",
			"C:\\Users\\James\\Dropbox\\MyStuff\\src",
			"C:\\Users\\James\\Dropbox\\MyStuff\\, -*.min.js",
			"C:\\Users\\James\\Dropbox\\MyStuff\\, -.min.js",
			"C:\\Users\\James\\Dropbox\\MyStuff\\"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"zoomer",
			"rotator",
			"clearVal",
			"clearColor",
			"bodyMesh",
			"body",
			"bodies[i].scale)",
			"10",
			" r ",
			"r ",
			"looptimeout",
			"startIndex",
			"initialize",
			"startInd",
			"checkLo",
			"loadBuffer",
			"checkLoaded",
			"progressiveLoad",
			"random",
			"replacePreview",
			"width",
			"calc((100% - 20px",
			".compact .post",
			"topBar",
			"transition",
			".gallery",
			"thumb",
			"clearData",
			"ClearData",
			"thumb",
			"Math",
			"}*/",
			"attributeValues[key]",
			"Processing",
			"items have been processed",
			"itmes have been processed",
			"All items have",
			"thumb",
			"data-replace",
			"getFileType",
			"thumbName",
			"imageThumbnail",
			"thumb.thumb",
			"sizeOf",
			"thumb.thumb",
			"config",
			"thumb.thumb",
			"util.thumb",
			"currentCategory",
			"galleryWithPreview",
			"setupDropzon",
			"startUpload",
			"createComponent",
			"upload",
			"_scriptDir",
			"UnityModule",
			"getProjectPath",
			"unity",
			"unityzip",
			"generateFie",
			".image img",
			"canvas",
			"rotator",
			"glBase",
			"loopTimout",
			"dist",
			"bindBuffer",
			"console",
			"obj",
			"rotator",
			"projection",
			");",
			"initGl",
			"uploadComponentDest",
			"delete",
			"restore",
			"addPost",
			"thumbnail",
			"data-type=\"link\"",
			"dat-type=\"link\"",
			".compact .post-grid.showAll:hover .topBar",
			"#posts.compact .post-grid .components ",
			"#posts.compact .post-grid .toggleShowAll",
			"\n}",
			".post .components",
			"#posts:not(.compact) .post-grid",
			".post.post-grid:not(.oneChild) .components",
			".post.post-grid:not(.oneChild) .components\\",
			"#posts.compact .component[data-type=\"link\"]",
			"#posts.compact .post-grid",
			".compact .post:not(.pinned) .topBar",
			"#posts.compact .post:hover",
			".tags",
			".post-grid:not(.showAll",
			".post-grid",
			"showAll",
			"showInfo",
			"remove",
			"removePost",
			".tags",
			"closeEditor",
			"clearFilters",
			"loadSuggestions",
			".post-grid .date",
			"#postViewer",
			".post .title",
			"queueP",
			"viewPost",
			"Viewer.viewPost",
			"empty",
			"editPost",
			"className",
			"editPost",
			"Viewer.previewPostt",
			"preview",
			"validatePost",
			"toEdit",
			"editPost",
			"validatePost",
			"replacePost",
			"#postViewer .post-blog",
			"closeModal",
			"closeEditor",
			"console.log",
			"left",
			"getRestorePoints",
			".options",
			"#postViewer"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"loopTimeout",
			"titleText",
			"addCategory",
			"light",
			"mid",
			".view",
			"category.view",
			"serPrefs",
			"post-list",
			"post-grid",
			"post-blog",
			"icon-commit",
			"icon-progress",
			"categoryID: post.category._id",
			"unityChange",
			"currentUnity",
			"prevUnity",
			"unitySelector",
			"unityDZ",
			"contentOptions",
			"contentPreview",
			"editAnnotation",
			"validatePost",
			"endSave",
			"startSave",
			"util/adapter",
			"Viewer",
			"Editor",
			"Space",
			"Session",
			"options.offsetY",
			"options.keepOpen",
			"options.selectChosen",
			"options.deselectOthers",
			"options.setTitle",
			"options.prefix",
			"Space",
			"Tooltip",
			"Dialog",
			"Modal",
			"Session",
			"Editor",
			"Session",
			"Dialog",
			"Space",
			"Session",
			"Dialog",
			"Session",
			"categoryObj",
			"manage"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "9 - StarCube2/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8539,
						"regions":
						{
						},
						"selection":
						[
							[
								1624,
								1624
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 810.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "10 - StarOrb1/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7700,
						"regions":
						{
						},
						"selection":
						[
							[
								3465,
								3336
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1823.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 415,
						"regions":
						{
						},
						"selection":
						[
							[
								238,
								238
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "6 - BacteriaColorful/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1312,
						"regions":
						{
						},
						"selection":
						[
							[
								327,
								327
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "6 - BacteriaColorful/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6985,
						"regions":
						{
						},
						"selection":
						[
							[
								4384,
								4384
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3209.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "base/gl-base.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16755,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6899.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "webgl.sublime-project",
	"replace":
	{
		"height": 71.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 37.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 299.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
